// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (CalculatorService_PrimesClient, error)
	Avg_Api(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_Avg_ApiClient, error)
	Max_Api(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_Max_ApiClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Primes(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (CalculatorService_PrimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/calculator.CalculatorService/Primes", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimesClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimesClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimesClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Avg_Api(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_Avg_ApiClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/calculator.CalculatorService/Avg_Api", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceAvg_ApiClient{stream}
	return x, nil
}

type CalculatorService_Avg_ApiClient interface {
	Send(*PrimeRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type calculatorServiceAvg_ApiClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceAvg_ApiClient) Send(m *PrimeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceAvg_ApiClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Max_Api(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_Max_ApiClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/calculator.CalculatorService/Max_Api", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceMax_ApiClient{stream}
	return x, nil
}

type CalculatorService_Max_ApiClient interface {
	Send(*PrimeRequest) error
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type calculatorServiceMax_ApiClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceMax_ApiClient) Send(m *PrimeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceMax_ApiClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	Primes(*PrimeRequest, CalculatorService_PrimesServer) error
	Avg_Api(CalculatorService_Avg_ApiServer) error
	Max_Api(CalculatorService_Max_ApiServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) Primes(*PrimeRequest, CalculatorService_PrimesServer) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedCalculatorServiceServer) Avg_Api(CalculatorService_Avg_ApiServer) error {
	return status.Errorf(codes.Unimplemented, "method Avg_Api not implemented")
}
func (UnimplementedCalculatorServiceServer) Max_Api(CalculatorService_Max_ApiServer) error {
	return status.Errorf(codes.Unimplemented, "method Max_Api not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).Primes(m, &calculatorServicePrimesServer{stream})
}

type CalculatorService_PrimesServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type calculatorServicePrimesServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimesServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Avg_Api_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Avg_Api(&calculatorServiceAvg_ApiServer{stream})
}

type CalculatorService_Avg_ApiServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*PrimeRequest, error)
	grpc.ServerStream
}

type calculatorServiceAvg_ApiServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceAvg_ApiServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceAvg_ApiServer) Recv() (*PrimeRequest, error) {
	m := new(PrimeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_Max_Api_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Max_Api(&calculatorServiceMax_ApiServer{stream})
}

type CalculatorService_Max_ApiServer interface {
	Send(*PrimeResponse) error
	Recv() (*PrimeRequest, error)
	grpc.ServerStream
}

type calculatorServiceMax_ApiServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceMax_ApiServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceMax_ApiServer) Recv() (*PrimeRequest, error) {
	m := new(PrimeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _CalculatorService_Primes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Avg_Api",
			Handler:       _CalculatorService_Avg_Api_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Max_Api",
			Handler:       _CalculatorService_Max_Api_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
